# .github/workflows/test_deploy.yml
name: Manual Test Deploy Script # Name displayed in GitHub Actions UI

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  manual-test-run: # Job name
    runs-on: ubuntu-latest # Runner OS

    steps:
      - name: Checkout repository # Checkout the repository code
        uses: actions/checkout@v4

      - name: Set execute permission for script # Grant execute permission to the script
        run: chmod +x scripts/deploy.sh # Path to the script in the scripts/ directory

      - name: Run deploy script # Execute the deployment script
        # Run from the scripts/ directory so the script's relative paths (../rules, ../templates) work correctly
        run: |
          cd scripts
          bash deploy.sh

      # --- Regarding the necessity of this step ---
      # Q: Is it necessary to check for created files if they might already be in the repository?
      # A: Yes, this step is still valuable for a MANUAL test run.
      # Its purpose here is to verify that *this specific execution* of deploy.sh
      # ran without fatal errors and produced output files in the expected locations.
      # Even if the files existed before, this confirms the script didn't fail silently
      # before reaching the file generation stage (due to 'set -e').
      # For a more rigorous test (ensuring the script *created* them *this run*),
      # you could add a step *before* "Run deploy script" to delete existing generated files.
      # However, checking for existence is a good basic sanity check.
      - name: Verify generated files exist # Optional, but useful: Check if expected files were created/overwritten
        run: |
          echo "Checking for generated files in the root directory..."
          # Paths are relative to the repo root because the script's OUTPUT_DIR=".."
          ls -l . # List files in root for debugging
          test -f ./ss_conditions_1080.pac || (echo "::error::File ss_conditions_1080.pac not found!" && exit 1)
          test -f ./ss_conditions_1081.pac || (echo "::error::File ss_conditions_1081.pac not found!" && exit 1)
          test -f ./ss_conditions_1082.pac || (echo "::error::File ss_conditions_1082.pac not found!" && exit 1)
          test -f ./ss_conditions.acl || (echo "::error::File ss_conditions.acl not found!" && exit 1)
          test -f ./ss_conditions.conf || (echo "::error::File ss_conditions.conf not found!" && exit 1)
          test -f ./ss_conditions_clash.conf || (echo "::error::File ss_conditions_clash.conf not found!" && exit 1)
          test -f ./clash_proxy_rules.yaml || (echo "::error::File clash_proxy_rules.yaml not found!" && exit 1)
          echo "All expected files seem to be present."

      # This step is also optional but highly recommended for manual tests.
      # It allows you to download the files generated by *this specific run* for inspection.
      - name: Upload generated files as artifacts # Optional: Upload the generated files as build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-config-files-manual-test # Name of the artifact bundle
          path: | # Paths to the files to include in the artifact (relative to repo root)
            ./ss_conditions_*.pac
            ./ss_conditions.acl
            ./ss_conditions.conf
            ./ss_conditions_clash.conf
            ./clash_proxy_rules.yaml
          if-no-files-found: error # Fail the workflow if no files are found to upload